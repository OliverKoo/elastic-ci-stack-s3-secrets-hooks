#!/bin/bash

set -eu -o pipefail

s3_list() {
  local bucket="$1"
  local aws_s3_args=("--region=$AWS_DEFAULT_REGION")

  if ! aws s3 ls "${aws_s3_args[@]}" --recursive "s3://${bucket}" ; then
    return 1
  fi | awk '{print $4}'
}

s3_exists() {
  local bucket="$1"
  local key="$2"
  local aws_s3_args=("--region=$AWS_DEFAULT_REGION")

  if ! aws s3api head-object "${aws_s3_args[@]}" --bucket "$bucket" --key "$key" &>/dev/null ; then
    return 1
  fi
}

has_secrets_key() {
  local key="$1"

  if [[ -n "$s3_bucket_listable" && ${#s3_bucket_list[@]} -gt 0 ]] ; then
    for object in "${s3_bucket_list[@]}" ; do
      if [[ "$object" == "$key" ]] ; then
        return 0
      fi
    done
    return 1
  fi

  s3_exists "$s3_bucket" "$key"
}

s3_download() {
  local bucket="$1"
  local key="$2"
  local aws_s3_args=("--quiet" "--region=$AWS_DEFAULT_REGION")

  if [[ "${BUILDKITE_USE_KMS:-true}" =~ ^(true|1)$ ]] ; then
    aws_s3_args+=("--sse" "aws:kms")
  fi

  if ! aws s3 cp "${aws_s3_args[@]}" "s3://$1/$2" /dev/stdout ; then
    exit 1
  fi
}

safe_env_export() {
  sed -E -n 's/[^#]+/export &/ p'
}

add_ssh_private_key_to_agent() {
  local ssh_key="$1"

  if [[ -z "${SSH_AGENT_PID:-}" ]] ; then
    echo "~~~ Starting an ephemeral ssh-agent" >&2;
    eval "$(ssh-agent -s)"
  fi

  echo "~~~ Loading ssh-key into ssh-agent (pid ${SSH_AGENT_PID:-})" >&2;
  SSH_ASKPASS="/bin/false" ssh-add <(echo "$ssh_key")
}

if [[ -z "${AWS_DEFAULT_REGION:-}" ]] ; then
  export AWS_DEFAULT_REGION=us-east-1
fi

s3_bucket="${BUILDKITE_PLUGIN_SECRETS_S3_BUCKET:-}"
s3_bucket_prefix="${BUILDKITE_PLUGIN_SECRETS_S3_BUCKET_PREFIX:-$BUILDKITE_PIPELINE_SLUG}"
s3_bucket_listable=
s3_bucket_list=()
ls_output=

echo "~~~ Listing keys in :s3: $s3_bucket" >&2;
if ls_output="$(s3_list "$s3_bucket")" ; then
  s3_bucket_listable=1
  declare -a 's3_bucket_list=('"$ls_output"')'
  echo "LISTABLE"
else
  echo "~~~ :warning: Failed to list keys" >&2;
fi

if [[ -n "$s3_bucket" ]] ; then
  echo "~~~ Downloading secrets from :s3: $s3_bucket" >&2;

  ssh_key_paths=(
    "$s3_bucket_prefix/private_ssh_key"
    "$s3_bucket_prefix/id_rsa_github"
    "private_ssh_key"
    "id_rsa_github"
  )

  for key in ${ssh_key_paths[*]} ; do
    if has_secrets_key "$key" ; then
      echo "~~~ Downloading ssh-key from ${key}" >&2;
      if ! ssh_key=$(s3_download "${s3_bucket}" "$key") ; then
        echo "~~~ :warning: Failed to download ssh-key $key" >&2;
        exit 1
      fi
      add_ssh_private_key_to_agent "$ssh_key"
      key_found=1
    fi
  done

  if [[ -z "${key_found:-}" ]] && [[ "${BUILDKITE_REPO:-}" =~ ^git ]] ; then
    echo "~~~ :warning: Failed to find an SSH key in secret bucket" >&2;
    exit 1
  fi

  env_paths=(
    "${s3_bucket_prefix}/env"
    "${s3_bucket_prefix}/environment"
    "env"
    "environment"
  )

  env_before="$(env | sort)"

  for key in ${env_paths[*]} ; do
    if has_secrets_key "$key" ; then
      echo "~~~ Downloading env file from $key" >&2;
      if ! envvars=$(s3_download "${s3_bucket}" "$key") ; then
        echo "~~~ :warning: Failed to download env from $key" >&2;
        exit 1
      fi
      eval "$(safe_env_export <<< "$envvars")"
    fi
  done

  if [[ "${BUILDKITE_PLUGIN_SECRETS_DUMP_ENV:-1}" =~ ^(true|1)$ ]] ; then
    echo "~~~ Environment variables that were set" >&2;
    comm -13 <(echo "$env_before") <(env | sort) || true
  fi

  git_credentials_paths=(
    "git-credentials"
    "${s3_bucket_prefix}/git-credentials"
  )

  for key in ${git_credentials_paths[*]} ; do
    if has_secrets_key "$key" ; then
      echo "~~~ Downloading git-credentials files" >&2;
      if ! envvars=$(s3_download "${s3_bucket}" "$key") ; then
        echo "~~~ :warning: Failed to download git-credentials from $key" >&2;
        exit 1
      fi
      git_credentials="$(mktemp "$PWD/git-credentials.XXXXXXXXXXX")"
      echo "$key" > "$git_credentials"
      git config credential.helper "store --file=$git_credentials"
    fi
  done
fi
